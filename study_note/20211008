nestjs + nodejs 강의
- 21, 22, 23강 완료

프로젝트가 repository안에 여러 개의 프로젝트로 구성되어 있기 때문에
.eslintrc.js파일에서 tsconfigRootDir : __dirname 옵션을 추가해서 잡아준다.

Nestjs에서 service, repository, factory, helper 등은 Provider로 취급된다.
Provider의 주요 기능은 종속성 주입(Dependency injection)
추가 사항
+ Custom providers
+ Optional providers

module명은 복수로 짓는다.
nestjs의 cli 생성 방법 : https://docs.nestjs.kr/cli/usages
cli로 module을 생성하면 app.module에 자동으로 입력된다.

provider는 캡슐화 되기 때문에 다른 곳에서 사용할 수 없다. 현재의 provider를 다른곳에서 사용하려면 exports로 내보내야 한다.
ex)
module.ts 파일
@Module({
  controllers: [CatsController],
  providers: [CatsService],
  exports: [CatsService], <==
})

캡슐화란?
캡슐화(encapsulation)는 일반적으로 연관 있는 변수와 함수를 클래스로 묶는 작업을 말합니다. 
그런데 이 작업은 클래스 만드는 작업과 비슷하다고 여길 수도 있습니다. 
하지만 캡슐화에는 은닉성이란게 있어서 클래스에 담는 내용 중 중요한 데이터나 기능을 외부에서 접근하지 못하게 할 수 있습니다.

∴객체의 필드(속성), 메소드를 하나로 묶고, 실제 구현 내용을 외부에 감추는 것을 말한다.
∴외부 객체는 객체 내부의 구조를 얻지 못하며 객체가 노출해서 제공하는 필드와 메소드만 이용할 수 있다.
∴필드와 메소드를 캡슐화하여 보호하는 이유는 외부의 잘못된 사용으로 인해 객체가 손상되지 않도록 하는데 있다.
∴자바 언어는 캡슐화된 멤버를 노출시킬 것인지 숨길 것인지를 결정하기 위해 접근 제한자(Access Modifier)를 사용한다.